<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-04-13T00:38:27-03:00</updated><id>/feed.xml</id><title type="html">Cecília Assis</title><subtitle>Cecília Assis' personal website + blog that ensembles everything that is meanfingful to her. Focuses on Machine Learning, Ruby, Python and Finances.</subtitle><author><name>Cecília Assis</name></author><entry><title type="html">Ruby Proc: O que é e como usar?</title><link href="/ruby/procedures-proc-ruby/" rel="alternate" type="text/html" title="Ruby Proc: O que é e como usar?" /><published>2018-04-13T18:00:52-03:00</published><updated>2018-04-13T18:00:52-03:00</updated><id>/ruby/procedures-proc-ruby</id><content type="html" xml:base="/ruby/procedures-proc-ruby/">&lt;p&gt;&lt;em&gt;&lt;strong&gt;Oi, como vai?&lt;br /&gt;
&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Hoje falarei sobre as &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;procs&lt;/code&gt;&lt;/span&gt;, também conhecidas como &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;procedures&lt;/code&gt;&lt;/span&gt; do Ruby.&lt;/p&gt;

&lt;h2&gt;O que é uma Proc?&lt;/h2&gt;
&lt;p&gt;Estando intimamente ligadas com os &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;blocks&lt;/code&gt;&lt;/span&gt;, as &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;procs&lt;/code&gt;&lt;/span&gt; são a transformação de um bloco em um objeto. Ou seja, as &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;procedures&lt;/code&gt;&lt;/span&gt; são nada mais, nada menos que aquilo que o seu próprio nome indica: procedimentos; objetos que armazenam trechos reutilizáveis de código.&lt;/p&gt;

&lt;p&gt;Ficou confuso? Vamos ao código!&lt;/p&gt;

&lt;!-- &lt;p&gt;As &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;procs&lt;/code&gt;&lt;/span&gt;, abreviação para &lt;i&gt;procedures&lt;/i&gt; (procedimentos), são objetos que representam os blocos, deste que os mesmos sejam convertidos em tal.&lt;/p&gt;
&lt;p&gt;Por serem aquelas que representam os blocos, estas também recebem a mesma definição: &lt;em&gt;trechos de código que podem ser usados de forma reutilizável&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt; --&gt;
&lt;h2&gt;Declaração&lt;/h2&gt;
&lt;p&gt;O primeiro passo para utilização de uma &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;proc&lt;/code&gt;&lt;/span&gt; é a sua declaração. Podendo ocorrer de duas formas, o momento de instanciação de uma &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;proc&lt;/code&gt;&lt;/span&gt; é muito importante, pois é a por meio dele que um &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;block&lt;/code&gt;&lt;/span&gt; é transformado em objeto, indicando a &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;proc&lt;/code&gt;&lt;/span&gt; qual trecho de código essa irá executar.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' Sou uma proc'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ou&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' Sou uma proc'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!-- Podendo ser uma proOnde a primeira instância um novo objeto diretamente, enquanto  você pode perceber &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;procs&lt;/code&gt;&lt;/span&gt; podem ser declaradas de duas formas: --&gt;

&lt;!-- - &lt;strong&gt;instanciando-se&lt;/strong&gt; um objeto explicita da classe ou; &lt;br /&gt; --&gt;
&lt;!-- - utilizando a &lt;strong&gt;palavra-chave&lt;/strong&gt; representa este comando.&lt;/p&gt; --&gt;

&lt;p&gt;Para entender melhor o conceito, faça o seguinte teste: crie uma &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;proc&lt;/code&gt;&lt;/span&gt; sem um &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;block&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;

&lt;h2&gt;Execução&lt;/h2&gt;
&lt;p&gt;O segundo passo é então a execução do código: para executar uma &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;proc&lt;/code&gt;&lt;/span&gt; temos que chamar o método &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;call&lt;/code&gt;&lt;/span&gt; sobre ela.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Saída&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Sou uma proc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;E voilá, tudo certo!&lt;/p&gt;

&lt;h2&gt;Argumentos&lt;/h2&gt;
&lt;p&gt;Por ser a abstração de um bloco, as &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;procs&lt;/code&gt;&lt;/span&gt; suportam também a definição de argumentos. Para isso, esses precisam ser configurados durante a instanciação do objeto e repassados durante a sua chamada por meio do método  &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;call&lt;/code&gt;&lt;/span&gt; .&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a + b = &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Saída&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a + b = 15
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;notice--warning&quot;&gt;
  
&lt;p&gt;&lt;strong&gt;Atenção&lt;/strong&gt;: Saiba que para as &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;procs&lt;/code&gt;&lt;/span&gt; os argumentos &lt;strong&gt;não&lt;/strong&gt; são obrigatórios e erro nenhum é apresentado caso alguns dos parâmetros não seja informado.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, b:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Saída&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a:, b:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;h2&gt;Escopo&lt;/h2&gt;
&lt;p&gt;Outra informação importante sobre as &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;procs&lt;/code&gt;&lt;/span&gt; é que por serem closures &lt;sup id=&quot;fnref-2277-1&quot;&gt;&lt;a href=&quot;#fn-2277-1&quot; class=&quot;jetpack-footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, &lt;sup id=&quot;fnref-2277-2&quot;&gt;&lt;a href=&quot;#fn-2277-2&quot; class=&quot;jetpack-footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, essas possuem um escopo próprio que não é perdido quando são executadas.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gen_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;times3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gen_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;times5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gen_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Saída&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;36
25
60
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sei que o exemplo pode parecer complexo por isso explicarei passo a passo. Vamos lá?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Declaramos o método &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;gen_times&lt;/code&gt;&lt;/span&gt; que recebe como argumento o parâmetro &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;factor&lt;/code&gt;&lt;/span&gt;; &lt;/li&gt;
  &lt;li&gt;Um objeto &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;Proc&lt;/code&gt;&lt;/span&gt; é retornado definindo um bloco que recebe um argumento &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;n&lt;/code&gt;&lt;/span&gt; e por sua vez retorna o produto de &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;n&lt;/code&gt;&lt;/span&gt; por &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;factor&lt;/code&gt;&lt;/span&gt;; &lt;/li&gt;
  &lt;li&gt;A variável &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;times3&lt;/code&gt;&lt;/span&gt; é instanciada com o retorno do método &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;gen_times&lt;/code&gt;&lt;/span&gt; com &lt;strong&gt;3 &lt;/strong&gt; enquanto &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;factor&lt;/code&gt;&lt;/span&gt;; &lt;/li&gt;
  &lt;li&gt;O mesmo ocorre para a variável &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;times5&lt;/code&gt;&lt;/span&gt; dessa vez com &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;factor&lt;/code&gt;&lt;/span&gt; igual a &lt;strong&gt;5&lt;/strong&gt;; &lt;/li&gt;
  &lt;li&gt;A &lt;i&gt;procedure&lt;/i&gt; armazenada em &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;times3&lt;/code&gt;&lt;/span&gt; é chamada repassando &lt;strong&gt;12&lt;/strong&gt; ao parâmetro &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;n&lt;/code&gt;&lt;/span&gt;; &lt;/li&gt;
  &lt;li&gt;Igualmente acontece para &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;times5&lt;/code&gt;&lt;/span&gt;; &lt;/li&gt;
  &lt;li&gt;Última linha de execução e ambas as &lt;i&gt;procudures&lt;/i&gt; são combinadas, com o retorno de uma servindo de argumento para a outra.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sendo assim, ao observar a saída, você pode perceber que o primeiro resultado é correspondente a &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;12 * 3&lt;/code&gt;&lt;/span&gt;, o segundo a &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;5 * 5&lt;/code&gt;&lt;/span&gt; e o terceiro: &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;20 * 3&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Ou seja no momento em que o argumento &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;factor&lt;/code&gt;&lt;/span&gt; foi estabelecido, o mesmo não se perdeu, ainda que diferentes chamadas do método &lt;span style=&quot;color:#ff6600; &quot;&gt;&lt;code&gt;call&lt;/code&gt;&lt;/span&gt; fossem executas sobre os objetos.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Bem, por hora acho que está bom. No próximo post falaremos sobre &lt;strong&gt;lambdas&lt;/strong&gt; e como elas são diferentes das &lt;strong&gt;procs&lt;/strong&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:center; &quot;&gt;Mas me diga, você ja conhecia as &lt;em&gt;procedures&lt;/em&gt;? E como as usava? Fala pra gente aí nos comentários!&lt;/p&gt;
&lt;p style=&quot;text-align:center; &quot;&gt;Te vejo no próximo post hein!&lt;/p&gt;
&lt;p style=&quot;text-align:right; &quot;&gt;&lt;em&gt;&lt;strong&gt;&lt;br /&gt;
See you later, alligator!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot; size-full wp-image-2278 aligncenter&quot; src=&quot;/assets/proc.png&quot; alt=&quot;proc&quot; width=&quot;820&quot; height=&quot;614&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-2277-1&quot;&gt;
&lt;a href=&quot;https://stackoverflow.com/a/111111/6758434&quot;&gt;Stackoverflow&lt;/a&gt;&amp;#160; &lt;a href=&quot;#fnref-2277-1&quot;&gt;&amp;#8617; &lt;/a&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-2277-2&quot;&gt;
&lt;a href=&quot;http://bit.ly/2E5fef7&quot;&gt;The Comprehensive Guide to JavaScript Design Patterns&lt;/a&gt;&amp;#160; &lt;a href=&quot;#fnref-2277-2&quot;&gt;&amp;#8617; &lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><author><name>Cecília Assis</name></author><category term="block" /><category term="bloco" /><category term="do" /><category term="end" /><category term="lambda" /><category term="proc" /><category term="procedure" /><summary type="html">Oi, como vai? Hoje falarei sobre as procs, também conhecidas como procedures do Ruby.</summary></entry><entry><title type="html">Interactive Ruby Shell (IRB)</title><link href="/ruby/irb/" rel="alternate" type="text/html" title="Interactive Ruby Shell (IRB)" /><published>2018-04-06T18:00:05-03:00</published><updated>2018-04-06T18:00:05-03:00</updated><id>/ruby/irb</id><content type="html" xml:base="/ruby/irb/">&lt;p&gt;Oi, turobom?&lt;/p&gt;
&lt;p&gt;Hoje quero falar sobre o &lt;strong&gt;IRB&lt;/strong&gt;, sigla para &lt;em&gt;Interactive Ruby Shell&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;irb&lt;/code&gt;&lt;/span&gt; é um programa que pertence a categoria &lt;strong&gt;REPL&lt;/strong&gt;
  (&lt;em&gt;Read–eval–print loop&lt;/em&gt;), onde os códigos são lidos, interpretados/executados e o resultado dos mesmos é
  retornado interativamente.&lt;/p&gt;
&lt;p&gt;Mas, &quot;&lt;em&gt;como assim?&lt;/em&gt;&quot; você pergunta, te mostro nos &lt;em&gt;GIFs&lt;/em&gt; abaixo.&lt;/p&gt;
&lt;p style=&quot;text-align:center;&quot;&gt;&lt;strong&gt;Adicão&lt;/strong&gt;&lt;br /&gt;
  &lt;img class=&quot; size-full wp-image-2234 aligncenter&quot; src=&quot;/assets/adicao1.gif&quot; alt=&quot;adicao&quot; width=&quot;585&quot; height=&quot;99&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align:center;&quot;&gt;&lt;strong&gt;Método&lt;/strong&gt;&lt;br /&gt;
  &lt;img class=&quot; size-full wp-image-2235 aligncenter&quot; src=&quot;/assets/method1.gif&quot; alt=&quot;method&quot; width=&quot;600&quot; height=&quot;169&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Como você pode perceber cada linha de código é lida, interpretada e seu resultado apresentado rapidamente, tudo isso
  ocorre através da função &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/span&gt;&lt;sup id=&quot;fnref-2236-1&quot;&gt;&lt;a href=&quot;#fn-2236-1&quot; class=&quot;jetpack-footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;O shell informa resultados de comandos precedendo-os com os símbolos &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Tal programa foi escrito em Ruby pelo desenvolvedor Keiju Ishitsuka, e vem como parte de qualquer (&lt;em&gt;acredito
    eu&lt;/em&gt;) instalação &lt;strong&gt;padrão&lt;/strong&gt; do Ruby para auxiliar no desenvolvimento.&lt;/p&gt;
&lt;p&gt;Para desenvolvimentos rápidos ele é muito bom! Eu costumo usar sempre como calculadora rsrsrs.&lt;/p&gt;
&lt;p&gt;O IRB aceita vários argumentos como parte de sua chamada, veja &lt;a href=&quot;http://ruby-doc.org/stdlib-2.0.0/libdoc/irb/rdoc/IRB.html&quot;&gt;aqui&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;

&lt;h1&gt;Pry&lt;/h1&gt;
&lt;p&gt;O &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;pry&lt;/code&gt;&lt;/span&gt; também se encaixa na categoria &lt;i&gt;REPL&lt;/i&gt; mas diferentemente
  do &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;irb&lt;/code&gt;&lt;/span&gt; este precisa ser instalado na forma de &lt;i&gt;gem&lt;/i&gt; para que
  possamos usá-lo:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pry
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;O mesmo é um programa super legal que conta com uma série de comandos/aspectos a mais que o simples &lt;b&gt;irb&lt;/b&gt;, por
  exemplo: cores &lt;em&gt;lindas&lt;/em&gt; e &lt;em&gt;maravilhosas&lt;/em&gt;, o que pra mim é &lt;b&gt;muito&lt;/b&gt; importante, documentação
  formatada e rápida, acesso ao código fonte dos métodos Ruby, dentre outros.&lt;/p&gt;
&lt;p&gt;Para saber mais sobre o &lt;i&gt;gem&lt;/i&gt;, entre &lt;a href=&quot;http://pryrepl.org/&quot;&gt;aqui&lt;/a&gt; para conhecer o site e a &lt;a href=&quot;https://github.com/pry/pry/wiki&quot;&gt;documentação&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Bem, este era o meu objetivo de hoje, mostrar para vocês ferramentas que podem nos ajudar bastante no nosso
  dia-a-dia.&lt;/p&gt;
&lt;p style=&quot;text-align:center;&quot;&gt;E aí, você tem usado outras ferramentas para desenvolvimento que ache legal compartilhar?
  Deixe ai nos cometários, eu ficarei muito feliz em conhecê-las e testá-las.&lt;/p&gt;
&lt;p style=&quot;text-align:right;&quot;&gt;&lt;em&gt;&lt;strong&gt;&lt;br /&gt;
      See you later, alligator!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot; size-full wp-image-2239 aligncenter&quot; src=&quot;/assets/irb1.png&quot; alt=&quot;irb&quot; width=&quot;820&quot; height=&quot;614&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;hr /&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn-2236-1&quot;&gt;
      https://ruby-doc.org/core-2.5.0/Kernel.html#method-i-eval.&amp;#160;&lt;a href=&quot;#fnref-2236-1&quot;&gt;&amp;#8617;&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Cecília Assis</name></author><category term="irb" /><category term="pry" /><category term="repl" /><category term="shell" /><category term="terminal" /><summary type="html">Oi, turobom? Hoje quero falar sobre o IRB, sigla para Interactive Ruby Shell.</summary></entry><entry><title type="html">Tudo sobre herança e seus conceitos em Ruby!</title><link href="/ruby/heran%C3%A7a-objetos-classe/" rel="alternate" type="text/html" title="Tudo sobre herança e seus conceitos em Ruby!" /><published>2018-03-30T17:51:34-03:00</published><updated>2018-03-30T17:51:34-03:00</updated><id>/ruby/heran%C3%A7a-objetos-classe</id><content type="html" xml:base="/ruby/heran%C3%A7a-objetos-classe/">&lt;p&gt;Hoje vamos falar de herança.&lt;/p&gt;
&lt;p&gt;O conceito de herança se aplica quando nos perguntamos se um objeto é um subtipo de outro, ou seja, um cachorro é um
  animal, mas um animal não é necessariamente um cachorro certo?&lt;/p&gt;

&lt;p&gt;Em Ruby, tais conceitos não mudaram.&lt;/p&gt;
&lt;p&gt;Quando queremos explicitar uma relação de herança usamos somente um caractere: &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/span&gt;, e tudo está dito.&lt;/p&gt;
&lt;p&gt;Vamos a um exemplo presente no livro &lt;a href=&quot;https://pragprog.com/book/ruby4/programming-ruby-1-9-2-0&quot; target=&quot;_blank&quot;&gt;Programming Ruby 1.9 &amp;amp; 2.0&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Parent&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say_hello&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello from &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;say_hello&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# sub classe de &quot;parent&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# herda todos os métodos da sua superclasse&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Parent&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;say_hello&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Saída&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hello from Parent
Hello from Child
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Explicando rapidamente o exemplo: Na linha 3 formatamos a saída do método referenciando o objeto que acabou de ser
  criado (linha 7) com o nome da classe do mesmo: &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;self.class&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Logo depois, na linha 10, definimos a herança com o símbolo &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/span&gt;,
  dizendo que &lt;b&gt;Child&lt;/b&gt; &lt;i&gt;herda&lt;/i&gt; de &lt;b&gt;Parent&lt;/b&gt;, e assim a mágica acontece, pois quando chegamos na última
  linha do código o objeto &lt;strong&gt;c&lt;/strong&gt; chama o método &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;say_hello&lt;/code&gt;&lt;/span&gt;
  mostrando a todos de onde veio.&lt;/p&gt;
&lt;p&gt;Bem, o exemplo é bem simples, mas representa bem a simplicidade do Ruby que nos permite fazer muito com tão pouco.
&lt;/p&gt;
&lt;hr /&gt;

&lt;h1&gt;Super&lt;/h1&gt;
&lt;p&gt;Como em outras linguagens, o Ruby também conta com um mecanismo para que subtipos chamem métodos de sua superclasse.
&lt;/p&gt;
&lt;p&gt;Para isso é necessário que a classe filha defina um método que possua o mesmo nome daquele o qual quer invocar da
  classe pai, com isso, dentro deste, chamasse o comando &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;super&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Vamos utilizar o exemplo anterior:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Parent&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say_hello&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello from &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;say_hello&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Parent&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say_hello&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;say_hello&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Saída&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hello from Parent
Hello from Child
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Neste caso, quando atingimos a última linha do exemplo o comando presente em &lt;strong&gt;Child&lt;/strong&gt; será executado.
  Este por sua vez chama pelo método de sua classe pai que o define informando uma saída na tela.&lt;/p&gt;
&lt;p&gt;Também é possível passarmos argumentos para o método &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;super&lt;/code&gt;&lt;/span&gt;, ainda
  que aquele da subclasse não receba nenhum.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Parent&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say_hello_with_arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello from &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Parent&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say_hello_with_arg&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'The Child'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;say_hello_with_arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;say_hello_with_arg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Saída&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hello from Parent
Hello from The Child
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dessa forma, ainda que na classe &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;Child&lt;/code&gt;&lt;/span&gt; o método &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;say_hello_with_arg&lt;/code&gt;&lt;/span&gt; não defina nenhum parâmetro, ao chamar aquele em sua
  superclasse que o faz a mensagem desejada é obtida.&lt;/p&gt;
&lt;hr /&gt;

&lt;h1&gt;Superclasse&lt;/h1&gt;
&lt;p&gt;Existe ainda uma forma mais simples de sabermos qual objeto pertence a qual, com a chamada do método &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;superclass&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Este informa o nome da superclasse do objeto que o invoca.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Parent&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Parent&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;superclass&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;superclass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Saída&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Parent
Object
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;Por fim, é importante salientar que o Ruby &lt;b&gt;NÃO&lt;/b&gt; aceita múltiplas heranças.&lt;/p&gt;
&lt;p style=&quot;text-align:center;&quot;&gt;Com isso finalizamos o post de hoje. Me diga nos comentários o que achou e como você
  acredita que possa usar a &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;herança&lt;/code&gt;&lt;/span&gt; no seu dia-a-dia.&lt;/p&gt;
&lt;p style=&quot;text-align:right;&quot;&gt;&lt;em&gt;&lt;strong&gt;&lt;br /&gt;
      See you later, alligator!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/heranc3a7a.png&quot; alt=&quot;herança&quot; width=&quot;820&quot; height=&quot;614&quot; class=&quot;aligncenter size-full wp-image-2228&quot; /&gt;&lt;/p&gt;</content><author><name>Cecília Assis</name></author><category term="child" /><category term="filho" /><category term="herança" /><category term="mãe" /><category term="pai" /><category term="parent" /><category term="superclasse" /><summary type="html">Hoje vamos falar de herança. O conceito de herança se aplica quando nos perguntamos se um objeto é um subtipo de outro, ou seja, um cachorro é um animal, mas um animal não é necessariamente um cachorro certo?</summary></entry><entry><title type="html">Ruby Blocks: O que são e como usar?</title><link href="/ruby/blocks-em-ruby/" rel="alternate" type="text/html" title="Ruby Blocks: O que são e como usar?" /><published>2018-03-05T18:00:12-03:00</published><updated>2018-03-05T18:00:12-03:00</updated><id>/ruby/blocks-em-ruby</id><content type="html" xml:base="/ruby/blocks-em-ruby/">&lt;p&gt;Bem, o que são os blocos?&lt;a href=&quot;http://iamvery.com/2016/03/21/ruby-blocks-are-not-a-thing.html&quot; target=&quot;_blank&quot;&gt;
    Eles não são objetos ...&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://pragprog.com/book/ruby4/programming-ruby-1-9-2-0&quot;&gt;Programming Ruby 1.9 &amp;amp;
      2.0&lt;/a&gt;&lt;/strong&gt; fala: um bloco de código é um conjunto de declarações e expressões, que pode estar entre chaves
  &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/span&gt; ou &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;do/end&lt;/code&gt;&lt;/span&gt;
  &lt;em&gt;keywords&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;No Ruby, é comum vermos blocos em todo lugar, e aqui no blog não foi diferente: &lt;a href=&quot;/ruby/ordenando-arrays-em-ruby/&quot; target=&quot;_blank&quot;&gt;Ordenando Array em
    Ruby&lt;/a&gt;, &lt;a href=&quot;/ruby/each-select-map-vetor/&quot;&gt;Vetores e vetores, parte
    3&lt;/a&gt; ...&lt;/p&gt;
&lt;p&gt;Na sua utilização eles podem receber parâmetros ou não, sendo que esses, quando definidos, devem vir entre barras
  verticais &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;||&lt;/code&gt;&lt;/span&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Oi&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h1&gt;Inline Blocks&lt;/h1&gt;
&lt;p&gt;Esse tipo de bloco é aquele que vem entre chaves. O mesmo possui maior precedência do que o definido entre as
  palavras &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;do&lt;/code&gt;&lt;/span&gt; e &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/span&gt; e
  é favorecido para instruções de somente uma linha, daí o nome &lt;em&gt;inline&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h1&gt;Do/End Blocks&lt;/h1&gt;
&lt;p&gt;Como o primeiro tipo é para instruções de somente uma linha, este é para blocos maiores e a passagem de argumentos
  ocorre à frente da keyword &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;do&lt;/code&gt;&lt;/span&gt;. A precedência deste tipo é menor.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;other_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;ins datetime=&quot;2017-09-03T17:14:10-03:00&quot;&gt;Quando uma varíavel é declarada fora do bloco, e dentro dele uma com o
    mesmo nome também é, aquela de fora é sobrescrita pela variável de dentro. Fique ligadx!&lt;/ins&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h1&gt;Yield&lt;/h1&gt;
&lt;p&gt;Para finalizar, falemos do &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;yield&lt;/code&gt;&lt;/span&gt;, uma palavrinha que já me causou e
  às vezes ainda causa muita confusão.&lt;/p&gt;
&lt;p&gt;É importante saber que no Ruby tanto os métodos quanto os blocos não são executados no momento de sua definição, mas
  sim tem os seus contextos salvos e depois relembrados.&lt;/p&gt;
&lt;p&gt;Logo, quando uma linha que contém o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;yield&lt;/code&gt;&lt;/span&gt; é atingida no fluxo de
  execução, o &lt;strong&gt;bloco&lt;/strong&gt; antes definido é de fato realizado.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;triple&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'no método'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# o bloco vai vir aqui&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'de volta ao método'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# o que está no bloco será executado no lugar do yield&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;triple&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'agora no bloco'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Saída&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;no método
agora no bloco
de volta ao método
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Agora com parâmetros para uma(&lt;em&gt;sequência de Fibonnaci&lt;/em&gt;):&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib_up_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# atribuição paralela (i1 = 1 e i2 = 1)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/p&amp;gt;

fib_up_to(1000) {|f| print f, &quot; &quot; }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Aqui temos duas coisas novas: o uso de parâmetros e a atribuição paralela. Vamos a primeira novidade: Na linha 9
  chamamos o método com o parâmetro &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;1000&lt;/code&gt;&lt;/span&gt; e definimos o bloco com uma
  variável &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;f&lt;/code&gt;&lt;/span&gt;. Ao ser executado, o método &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;fib_up_to&lt;/code&gt;&lt;/span&gt; primeiro executa a atribuição paralela, onde &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;ì1&lt;/code&gt;&lt;/span&gt; e &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;i2&lt;/code&gt;&lt;/span&gt; recebem 1. Daí
  chegamos a linha 4 onde &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;yield&lt;/code&gt;&lt;/span&gt; aparece, pegando o valor de &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;i1&lt;/code&gt;&lt;/span&gt; e repassando ao bloco na linha 9, aqui o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;print&lt;/code&gt;&lt;/span&gt; é acionado, mostrando o valor atual de &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;i1&lt;/code&gt;&lt;/span&gt;. Depois disso tudo, o controle volta para linha 5, logo abaixo do
  &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;yield&lt;/code&gt;&lt;/span&gt;, com outra atribuição paralela.&lt;/p&gt;
&lt;p&gt;A saída desse código é:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pode parecer confuso de primeira, acredite, eu sei! Por isso, sugiro que debugue o código e veja o seu funcionamento
  na prática. O Visual Studio tem ferramentas ótimas para isso!&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Bem, acho que por hoje chega, rsrs. Muita coisa foi passada e os blocos devem ser estudados!&lt;/p&gt;
&lt;p style=&quot;text-align:center;&quot;&gt;E aí!? Me diga o que você acha dos blocos e me conte nos comentários como os usa!&lt;/p&gt;
&lt;p style=&quot;text-align:right;&quot;&gt;&lt;em&gt;&lt;strong&gt;Te espero no próximo post (:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot; size-full wp-image-2221 aligncenter&quot; src=&quot;/assets/blocks.png&quot; alt=&quot;blocks&quot; width=&quot;735&quot; height=&quot;550&quot; /&gt;&lt;/p&gt;</content><author><name>Cecília Assis</name></author><category term="block" /><category term="blocks" /><category term="yield" /><summary type="html">Bem, o que são os blocos? Eles não são objetos ...</summary></entry><entry><title type="html">Como criar vetores usando “range” em Ruby #funTip</title><link href="/ruby/popular-vetor-range/" rel="alternate" type="text/html" title="Como criar vetores usando &quot;range&quot; em Ruby #funTip" /><published>2017-11-21T11:45:52-02:00</published><updated>2017-11-21T11:45:52-02:00</updated><id>/ruby/popular-vetor-range</id><content type="html" xml:base="/ruby/popular-vetor-range/">&lt;p&gt;Quantas vezes programando você se deparou com a necessidade de criar um array populado com vários números?&lt;/p&gt;

&lt;p&gt;Bem, isso sempre acontece comigo! E o Ruby, muito legal que é, soluciona isso rapidamente com os &lt;em&gt;Ranges&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Saída:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  [1, 2, 3, 4, 5]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Viu como é que fácil?&lt;/p&gt;
&lt;p&gt;Usamos o construtor da classe com o range que queremos e está tudo pronto!&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'e'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Saída:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;O seguinte código também funciona:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'e'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pois usa o método &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;to_a&lt;/code&gt;&lt;/span&gt;: &lt;em&gt;to array&lt;/em&gt;, mas eu acho o uso do
  construtor mais intuitivo e você?&lt;/p&gt;
&lt;p style=&quot;text-align:right;&quot;&gt;&lt;strong&gt;Vamos lá! Brinque um pouco e deixa essa brincadeira nos comentários!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot; size-full wp-image-2218 aligncenter&quot; src=&quot;/assets/array_range.png&quot; alt=&quot;array_range&quot; width=&quot;735&quot; height=&quot;550&quot; /&gt;&lt;/p&gt;</content><author><name>Cecília Assis</name></author><category term="array" /><category term="funTip" /><category term="new" /><category term="ranges" /><summary type="html">Quantas vezes programando você se deparou com a necessidade de criar um array populado com vários números?</summary></entry><entry><title type="html">Qual a diferença entre `each.with_index` e `each_with_index` ? #funTip</title><link href="/ruby/each-with-index/" rel="alternate" type="text/html" title="Qual a diferença entre `each.with_index` e `each_with_index` ? #funTip" /><published>2017-11-14T11:45:36-02:00</published><updated>2017-11-14T11:45:36-02:00</updated><id>/ruby/each-with-index</id><content type="html" xml:base="/ruby/each-with-index/">&lt;p&gt;Já se perguntou qual a diferença entre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;each.with_index&lt;/code&gt; e &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;each_with_index&lt;/code&gt;, esse post vem para te ajudar a responder essa pergunta!&lt;/p&gt;

&lt;p&gt;O Ruby apresenta duas formas de iterarmos sobre &lt;a href=&quot;https://ruby-doc.org/core-2.4.1/Enumerable.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;objetos&lt;/a&gt; quando queremos acesso aos seus índices: o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;each_with_index&lt;/code&gt;&lt;/span&gt; o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;each.with_index&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mas qual a diferença entre os dois?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pois bem, a grande sacada está no ponto! Isso mesmo!&lt;/p&gt;

&lt;p&gt;Sendo o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;each.with_index&lt;/code&gt;&lt;/span&gt; um método que extende a funcionalidade do &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;each&lt;/code&gt;&lt;/span&gt;, esse aceita um deslocamento (&lt;em&gt;offset&lt;/em&gt;) que é somado ao índice original, ou seja, um pequeno ponto de começo para representar os seus números. Já o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;each_with_index&lt;/code&gt;&lt;/span&gt; não permite esse argumento.&lt;/p&gt;

&lt;p&gt;Veja:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_with_index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Saída:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2: foo
3: bar
4: baz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0: foo
1: bar
2: baz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Simples, mas ajuda.&lt;/p&gt;

&lt;h5&gt;Thanks to https://stackoverflow.com/a/20258160&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;/assets/each_with_index1.png&quot; alt=&quot;each_with_index&quot; width=&quot;735&quot; height=&quot;550&quot; class=&quot;alignnone size-full wp-image-2210&quot; /&gt;&lt;/p&gt;</content><author><name>Cecília Assis</name></author><category term="each" /><category term="index" /><category term="with" /><category term="funtip" /><summary type="html">Já se perguntou qual a diferença entre each.with_index e each_with_index, esse post vem para te ajudar a responder essa pergunta!</summary></entry><entry><title type="html">Qual a diferença entre `sprintf`, `format` e `printf` ? #funTip</title><link href="/ruby/sprintf-format-printf/" rel="alternate" type="text/html" title="Qual a diferença entre `sprintf`, `format` e `printf` ? #funTip" /><published>2017-11-07T11:45:52-02:00</published><updated>2017-11-07T11:45:52-02:00</updated><id>/ruby/sprintf-format-printf</id><content type="html" xml:base="/ruby/sprintf-format-printf/">&lt;p&gt;Hoje vou te explicar a diferença entre &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;printf&lt;/code&gt;&lt;/span&gt;, &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;sprintf&lt;/code&gt;&lt;/span&gt; e &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;format&lt;/code&gt;&lt;/span&gt;. Simbora?&lt;/p&gt;

&lt;h1&gt;Format e Sprintf&lt;/h1&gt;
&lt;p&gt;Pois bem, o que a documentação do Ruby - um dos &lt;ins&gt;amores&lt;/ins&gt; da minha vida - &lt;a href=&quot;https://ruby-doc.org/core-2.4.2/Kernel.html#method-i-sprintf&quot;&gt;fala&lt;/a&gt; é o seguinte:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot; size-full wp-image-2187 aligncenter&quot; src=&quot;/assets/sprintt.png&quot; alt=&quot;sprintt&quot; width=&quot;584&quot; height=&quot;79&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Ou seja, o que o método faz é retorna uma nova string formatada segundo os parâmetros a ela passados, o que lembra
  muito o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;printf&lt;/code&gt;&lt;/span&gt; da linguagem C não é mesmo? &lt;em&gt;Spoiler Alert!&lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;Quando &lt;a href=&quot;https://ruby-doc.org/core-2.4.0/String.html#method-i-25&quot;&gt;procuramos&lt;/a&gt; sobre o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;format&lt;/code&gt;&lt;/span&gt; o quê temos é:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot; size-full wp-image-2184 aligncenter&quot; src=&quot;/assets/format.png&quot; alt=&quot;format&quot; width=&quot;560&quot; height=&quot;106&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Logo, o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;format&lt;/code&gt;&lt;/span&gt; também retorna uma nova &lt;em&gt;string&lt;/em&gt; que foi
  formatada segundo um padrão determinado das &lt;em&gt;flags&lt;/em&gt; e caso sejam usadas várias delas um &lt;em&gt;array&lt;/em&gt; deve
  especificar qual valor indicado para cada uma delas.&lt;/p&gt;
&lt;p&gt;Simples não?&lt;/p&gt;
&lt;p&gt;Vamos a um exemplo comparativo:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# FORMAT&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;format_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%05d&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'String usando o método format: '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format_string&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# SPRINTF&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sprintf_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%05d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'String usando o método sprintf: '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprintf_string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Saída:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;String usando o método format: 00123
String usando o método sprintf: 00123
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Como você pode perceber, a principal diferença entre eles é que o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;sprintf&lt;/code&gt;&lt;/span&gt; separa flags e argumentos por &lt;strong&gt;vírgula&lt;/strong&gt;, enquanto
  o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;format&lt;/code&gt;&lt;/span&gt; usa o sinal de &lt;strong&gt;porcentagem&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;É importante sabe que aquelas flags que se aplicam pra um, também funcionarão para o outro e documentação Ruby
  explica muito bem cada uma delas! &lt;em&gt;Se quiser que eu me aprofunde nelas, deixe aqui nos comentários!&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Printf&lt;/h1&gt;
&lt;p&gt;Se você é uma daquelas(es) que já mexeu com a linguagem C, o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;printf&lt;/code&gt;&lt;/span&gt;
  é seu parceiro, e o seu comportamento não muda muito do que você está acostumada(o) não viu!&lt;/p&gt;
&lt;p&gt;Dando uma olhada na &lt;a href=&quot;https://ruby-doc.org/core-2.4.2/Kernel.html#method-i-printf&quot;&gt;documentação&lt;/a&gt; temos:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot; size-full wp-image-2185 aligncenter&quot; src=&quot;/assets/printf1.png&quot; alt=&quot;printf1&quot; width=&quot;584&quot; height=&quot;249&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Nada, não é mesmo? &lt;em&gt;Nãaaaaaaao!!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;O que Ruby a nossa parceira nos fala aqui é que o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;printf&lt;/code&gt;&lt;/span&gt; nada mais é
  que uma escrita na tela do o quê está sendo passado enquanto argumento da função, e se a gente prestar atenção vemos o
  uso do &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;sprintf&lt;/code&gt;&lt;/span&gt;, nosso novo melhor amigo, percebeu?&lt;/p&gt;
&lt;p&gt;Vamos dar uma olhada no código-fonte? Ah! Pra você que ainda não sabia, a documentação do Ruby disponibiliza a
  implentação em C, sua linguagem base, de grande parte, se não todos, dos métodos que possui e utiliza viu
  &lt;em&gt;&lt;strong&gt;#ficaADica&lt;/strong&gt;&lt;/em&gt;. OK então, aqui vai:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot; size-full wp-image-2186 aligncenter&quot; src=&quot;/assets/printf2.png&quot; alt=&quot;printf2&quot; width=&quot;355&quot; height=&quot;478&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Viu o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;sprintf&lt;/code&gt;&lt;/span&gt; ali de novo? Sensacional hein!&lt;/p&gt;
&lt;p&gt;Não me esquecendo do exemplo:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'String usando o método printf: %05d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Saída:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  String usando o método printf: 00123
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lembrete importante: Como no C o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;printf&lt;/code&gt;&lt;/span&gt; não traz no fim de cada
  linha um '&lt;em&gt;newline&lt;/em&gt;', ou, &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;\n&lt;/code&gt;&lt;/span&gt;, pois o formato da string quem
  define é você, certo?!&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Sendo assim, para finalizarmos e darmos aquela recapitulada básica, taí a colinha:&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;sprintf&lt;/code&gt;&lt;/span&gt; e &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;format&lt;/code&gt;&lt;/span&gt;
  retorna uma nova string formatada; &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;printf&lt;/code&gt;&lt;/span&gt; apresenta na tela um
  conteúdo formatado.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;E aí, curtiu o conteúdo?? Fala pra mim nos comentários poooor favooor! Se tiver alguma coisa errada também ok?
  &lt;strong&gt;Conto com vocês&lt;/strong&gt;!&lt;/p&gt;
&lt;p style=&quot;text-align:right;&quot;&gt;&lt;em&gt;&lt;strong&gt;Beijos e até o próximo post!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h5&gt;Thanks to: https://www.theurbanpenguin.com/ruby-using-sprintf-and-printf-to-format-strings/&lt;/h5&gt;
&lt;p&gt;&lt;img class=&quot; size-full wp-image-2204 aligncenter&quot; src=&quot;/assets/sprintf_printf_format.png&quot; alt=&quot;sprintf_printf_format&quot; width=&quot;735&quot; height=&quot;550&quot; /&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;</content><author><name>Cecília Assis</name></author><category term="funtip" /><category term="format" /><category term="printf" /><category term="sprintf" /><category term="string" /><summary type="html">Hoje vou te explicar a diferença entre printf, sprintf e format. Simbora?</summary></entry><entry><title type="html">Tudo o que você precisa saber sobre loops e iteradores em Ruby!</title><link href="/ruby/loops-iteradores/" rel="alternate" type="text/html" title="Tudo o que você precisa saber sobre loops e iteradores em Ruby!" /><published>2017-09-28T18:00:24-03:00</published><updated>2017-09-28T18:00:24-03:00</updated><id>/ruby/loops-iteradores</id><content type="html" xml:base="/ruby/loops-iteradores/">&lt;p style=&quot;text-align:center;&quot;&gt;&lt;strong&gt;Oi, tudo bem com você?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hoje falarei sobre como podemos percorer objetos e escrever loops em Ruby, vamos lá?&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;Read the &lt;a href=&quot;https://merubygirl.wordpress.com/2017/05/25/english-version-loops-1/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ENGLISH VERSION&lt;/a&gt;.&lt;/p&gt;

&lt;!-- No post sobre blocos, falamos rapidamente sobre iteradores e entendemos um pouquinho sobre como podemos usá-los para vermos todos os elementos de um vetor.  --&gt;

&lt;!-- Contudo, sua funções não param aí, sendo possível fazermos coisas ainda mais legais com eles, e é sobre isso que irei falar hoje, vamos lá? --&gt;

&lt;p&gt;&lt;!-- usando os iteradores como métodos do objeto &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/span&gt;, a classe que representa os números inteiros em Ruby. --&gt;&lt;/p&gt;

&lt;h2&gt;Diferença entre Loops e Iteradores&lt;/h2&gt;
&lt;p&gt;Antes de mais nada, é importante que você entenda a diferença entre Loops e Iteradores. Ainda que os dois pareçam coisas iguais, eles não são.&lt;/p&gt;

&lt;p&gt;No Ruby, um &lt;strong&gt;loop&lt;/strong&gt; é um conjunto de código que deve ser repetido até que uma condição de parada seja encontrada, ou seja, quando um número for menor que outro por exemplo. Programadores lidam com loops diarimente, alguns exemplos são os loops &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/span&gt; e &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Já os iteradores são &lt;strong&gt;métodos&lt;/strong&gt; que permitem a você percorrer (iterar) um conjunto de dados, acessando potencialmente todos os seus elementos.&lt;/p&gt;

&lt;h2&gt;Loops&lt;/h2&gt;
&lt;p&gt;Bastante conhecidos, os loops nos ajudam a repetir um código até quando nós quisermos, pedindo sempre uma condição de parada para serem finalizados.&lt;/p&gt;

&lt;p&gt;Sendo uma linguagem completa, o Ruby não só apresenta os loops mais conhecidos no mundo da programação, assim como alguns especiais. São eles:&lt;/p&gt;

&lt;h3&gt;Loop&lt;/h3&gt;
&lt;p&gt;Claro como o próprio nome, o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;loop&lt;/code&gt;&lt;/span&gt; é responsável por executar um pedaço de código &lt;em&gt;N&lt;/em&gt; vezes, precisando de um critério de parada &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;break&lt;/code&gt;&lt;/span&gt;, explícito, já que esse nos leva ao infinito simplesmente porque quer.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Saída:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1
2
3
4
5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note que ele não informa variável ao bloco, e é porque não tem mesmo! Faça o teste e veja:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;For&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Ah! Mas e o for? O Ruby não tem for??&lt;/em&gt; Calma, calma! Temos &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/span&gt; em Ruby, mas com uma reviravolta: oor ser basicamente um &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;each&lt;/code&gt;&lt;/span&gt;, sempre que o Ruby percebe o uso de um &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/span&gt;, ele coloca um &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;each&lt;/code&gt;&lt;/span&gt; no lugar.&lt;/p&gt;

&lt;p&gt;Por isso, sempre que for em usar um &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/span&gt; (&lt;em&gt;bah dum tss&lt;/em&gt;), avalie se o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;each&lt;/code&gt;&lt;/span&gt; não seria o mais indicado.&lt;/p&gt;

&lt;p&gt;Contudo, todavia, entretado, pelo bem da documentação, vou colocá-lo aqui, OK?!&lt;/p&gt;

&lt;p&gt;Expectativa:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fee'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'fi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'fo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'fum'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Realidade:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fee'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'fi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'fo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'fum'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Saída:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fee fi fo fum 1 2 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;While&lt;/h3&gt;
&lt;p&gt;Já conhecido, o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/span&gt; faz algo *enquanto* sua condição é satisfeita.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Saída:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1
2
3
4
5
6
7
8
9
10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;O &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/span&gt; como todos os outros loops, aceita o uso do &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;break&lt;/code&gt;&lt;/span&gt;, porém atenção - você não pode não precisar dele se fizer uma &lt;strong&gt;boa lógica &lt;/strong&gt;de loop.&lt;/p&gt;

&lt;h3&gt;UNTIL&lt;/h3&gt;
&lt;p&gt;Finalmente temos o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;until&lt;/code&gt;&lt;/span&gt;, mais um diferencial do Ruby. Também, claro como a luz do sol, o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;until&lt;/code&gt;&lt;/span&gt; executa um conjunto de comando &lt;strong&gt;até que&lt;/strong&gt; sua condição seja satisfeita – sendo, então, o contrário do &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Saída:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1
2
3
4
5
6
7
8
9 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2&gt;Iteradores&lt;/h2&gt;
&lt;p&gt;Possivelmente não tão conhecidos, os iteradores procuram facilitar a vida o programador que deseja percorrer objetos acessando potencialmente todos os seus elementos.&lt;/p&gt;

&lt;!-- Com isso, sendo o Ruby a linguagem linda que é, essa oferece diversos tipos de iteradores que facilitam muito a vida do programador na hora de codificar um programa.  --&gt;

&lt;p&gt;No post sobre blocos vimos alguns deles como o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;each&lt;/code&gt;&lt;/span&gt; e o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/span&gt;, por exemplo. Porém, por serem métodos é possível esses sejam usados com outros tipos de objetos:&lt;/p&gt;

&lt;h3&gt;Times&lt;/h3&gt;
&lt;p&gt;Método da classe &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/span&gt;, o times permite que façamos algo
  &lt;em&gt;N&lt;/em&gt; vezes.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Ho! '&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Saída:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Ho! Ho! Ho!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;Upto&lt;/h3&gt;
&lt;p&gt;Já o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;upto&lt;/code&gt;&lt;/span&gt;, como o próprio nome diz, vai até um determinado
  número, permitindo, ao contrário do &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;times&lt;/code&gt;&lt;/span&gt;, que o valor atual seja utilizado dentro do bloco.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Saída:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 1 2 3 4 5 6 7 8 9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;Downto&lt;/h3&gt;
&lt;p&gt;Contrário ao &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;upto&lt;/code&gt;&lt;/span&gt;,  &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;downto&lt;/code&gt;&lt;/span&gt; faz o caminho reverso, contanto os números de cima para baixo.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;downto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Saída:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;9 8 7 6 5 4 3 2 1 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;Step&lt;/h3&gt;

&lt;p&gt;O &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;step&lt;/code&gt;&lt;/span&gt; itera até um determinado número (inclusive), pulando &lt;em&gt;N&lt;/em&gt; números.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Saída:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 3 6 9 12
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cara, o Ruby é uma linguagem muito do povo, fala sério. &amp;lt;3&lt;/p&gt;

&lt;h3&gt;Each&lt;/h3&gt;
&lt;p&gt;Já apresentado um monte de vezes no blog, o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;each&lt;/code&gt;&lt;/span&gt; nos permite iterar sobre estruturas que dão suporte ao método e que dessa forma podem aproveitar das maravilhas do módulo &lt;a href=&quot;https://ruby-doc.org/core-2.4.1/Enumerable.html&quot; target=&quot;_blank&quot;&gt;Enumerable&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Saída:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 1 2 3 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p style=&quot;text-align:center;&quot;&gt;Então, ficou faltando algo? Pode me falar nos comentários!&lt;/p&gt;
&lt;p style=&quot;text-align:right;&quot;&gt;&lt;strong&gt;&lt;em&gt;Até o próximo post!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot; size-full wp-image-2141 aligncenter&quot; src=&quot;/assets/iteradores.png&quot; alt=&quot;iteradores&quot; width=&quot;735&quot; height=&quot;550&quot; /&gt;&lt;/p&gt;</content><author><name>Cecília Assis</name></author><category term="down" /><category term="for" /><category term="loop" /><category term="step" /><category term="times" /><category term="to" /><category term="up" /><summary type="html">Oi, tudo bem com você? Hoje falarei sobre como podemos percorer objetos e escrever loops em Ruby, vamos lá?</summary></entry><entry><title type="html">Qual a diferença entre `p`, `puts` e `print`? #funTip</title><link href="/ruby/p-puts-print-inspect/" rel="alternate" type="text/html" title="Qual a diferença entre `p`, `puts` e `print`? #funTip" /><published>2017-09-16T15:16:51-03:00</published><updated>2017-09-16T15:16:51-03:00</updated><id>/ruby/p-puts-print-inspect</id><content type="html" xml:base="/ruby/p-puts-print-inspect/">&lt;p&gt;Você alguma vez já se perguntou: &lt;em&gt;Qual a diferença entre o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;p&lt;/code&gt;&lt;/span&gt;, o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;puts&lt;/code&gt;&lt;/span&gt; e o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;print&lt;/code&gt;&lt;/span&gt; no Ruby?&lt;/em&gt; Não se preocupe, eu vou te contar!&lt;/p&gt;

&lt;p&gt;Pois bem, aqui vai a sua resposta:&lt;/p&gt;

&lt;p&gt;Enquanto o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;puts&lt;/code&gt;&lt;/span&gt; é apresenta uma linha “formatata” seguida de um &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;\n&lt;/code&gt;&lt;/span&gt;, o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;p&lt;/code&gt;&lt;/span&gt; mostra em sua linha o objeto da forma como ele é, enquanto o  &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;print&lt;/code&gt;&lt;/span&gt; tem o mesmo comportamento o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;puts&lt;/code&gt;&lt;/span&gt;, porém sua resposta não é acompanhada de uma nova linha logo em seguida.&lt;/p&gt;

&lt;p&gt;Leitor(a): &lt;em&gt;Como assim? &lt;/em&gt; Cecília: &lt;em&gt;Assim:&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Saída:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1
2
3
[1,2,3]
[1, 2, 3][1, 2, 3]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;O &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;puts&lt;/code&gt;&lt;/span&gt;, assim como o &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;print&lt;/code&gt;&lt;/span&gt; tratam strings, caracteres mesmo. O &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;p&lt;/code&gt;&lt;/span&gt; lida com objetos, desmacarando-os.&lt;/p&gt;

&lt;h2&gt;* Bônus * : Inspect&lt;/h2&gt;
&lt;p&gt;Talvez você já tenha ouvido falar do comando &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;inspect&lt;/code&gt;&lt;/span&gt;. Não?! Que isso, estou aqui para te ajudar!&lt;/p&gt;

&lt;p&gt;O  &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;inspect&lt;/code&gt;&lt;/span&gt; é um &lt;em&gt;alias&lt;/em&gt;, isso é, apelido do &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;p&lt;/code&gt;&lt;/span&gt;, sendo ele um método que deve ser chamado a partir de objetos propriamente ditos:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inspect&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Saída:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[1,2,3]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Mas &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;p&lt;/code&gt;&lt;/span&gt; é bem mais fácil, certo?&lt;/p&gt;
&lt;p&gt;No final das contas, um não é melhor que outro, eles só servem para propósitos diferentes ;) !&lt;/p&gt;
&lt;hr /&gt;

&lt;p style=&quot;text-align:center;&quot;&gt;E aí? O quê achou!? Me conte nos comentários!&lt;/p&gt;
&lt;p style=&quot;text-align:right;&quot;&gt;&lt;strong&gt;&lt;em&gt;See you later, alligator.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-2138&quot; src=&quot;/assets/pvsputs.png&quot; alt=&quot;pvsputs&quot; width=&quot;735&quot; height=&quot;550&quot; /&gt;&lt;/p&gt;</content><author><name>Cecília Assis</name></author><category term="inspect" /><category term="p" /><category term="print" /><category term="puts" /><category term="funTip" /><summary type="html">Você alguma vez já se perguntou: Qual a diferença entre o p, o puts e o print no Ruby? Não se preocupe, eu vou te contar!</summary></entry><entry><title type="html">Como declarar constante ou variável local e/ou global em Ruby</title><link href="/ruby/variavel-local-global-constante/" rel="alternate" type="text/html" title="Como declarar constante ou variável local e/ou global em Ruby" /><published>2017-08-10T16:54:43-03:00</published><updated>2017-08-10T16:54:43-03:00</updated><id>/ruby/variavel-local-global-constante</id><content type="html" xml:base="/ruby/variavel-local-global-constante/">&lt;p style=&quot;text-align:center;&quot;&gt;&lt;em&gt;&lt;strong&gt;Hey, como vai?!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Olha, você sabia que em Ruby, os primeiros caracteres do &lt;strong&gt;nome&lt;/strong&gt; de uma variável ditam qual a
  função dela? Do quê ela trata?&lt;br /&gt;
  Eu não sabia, e decidi trazer essa informação a você (e mais algumas coisinhas)!&lt;/p&gt;

&lt;h2&gt; Declarando variáveis &lt;/h2&gt;

&lt;p&gt;Pois bem, para variáveis &lt;em&gt;locais&lt;/em&gt;, &lt;em&gt;parâmetros&lt;/em&gt; e &lt;em&gt;nome de métodos&lt;/em&gt; usamos: letra minúscula ou
  underscore (&lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt; _ &lt;/code&gt;&lt;/span&gt;), sendo o &lt;em&gt;underscore&lt;/em&gt; mais indicado para &lt;a href=&quot;https://github.com/ceciliassis/ruby-style-guide#trailing-underscore-variables&quot;&gt;informar uma variável que não será utilizada&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Já as variáveis &lt;em&gt;globais&lt;/em&gt; devem começar com &lt;strong&gt;cifrão&lt;/strong&gt; (&lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;$&lt;/code&gt;&lt;/span&gt;), ex: &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;$ENV&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Variáveis de &lt;em&gt;instância&lt;/em&gt;, isto é, aquelas declaradas dentro de classe de um objeto, começam com &lt;strong&gt;arroba&lt;/strong&gt; (&lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;@&lt;/code&gt;&lt;/span&gt;), ex: &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;@nome&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Variáveis da &lt;em&gt;classe&lt;/em&gt; começam com dois &lt;strong&gt;arrobas&lt;/strong&gt; (&lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;@@&lt;/code&gt;&lt;/span&gt;), ex: &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;@@config&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Levando isso em conta, após caracteres “especiais”, você pode usar números ou o que der na telha.&lt;/p&gt;

&lt;h2&gt; Declarando constantes &lt;/h2&gt;
&lt;p&gt;Como nem tudo são flores, o funcionamento das constantes no Ruby é um pouco diferente do que em outras linguagens.&lt;/p&gt;

&lt;p&gt;No Ruby, as constantes são declaradas com todas as letras maíusculas, ex: &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;UMA_CONSTANTE&lt;/code&gt;&lt;/span&gt;, convenção também praticada em outras comunidades, porém ainda que tenham o conceito de uma constante, é permitido que seus valores sejam modificados. Veja só:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;no&quot;&gt;NORTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'north'&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;NORTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'east'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Você perceberá que: mesmo com um erro lançado, o valor da variável é alterado. Isso ocorre porque o Ruby trabalha com
  objetos, &lt;a href=&quot;&quot;&gt; se lembra&lt;/a&gt;, fazendo com que a cada atribuição uma nova referência seja atrelada à variável.&lt;/p&gt;

&lt;p&gt;Uma alterativa seria congelar o objeto ...&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;no&quot;&gt;NORTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'north'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ou&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;NORTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;... no entanto, o quê o método &lt;span style=&quot;color:#ff6600;&quot;&gt;&lt;code&gt;freeze&lt;/code&gt;&lt;/span&gt; faz é congelar o objeto referênciado ...&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;no&quot;&gt;NORTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'north'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;NORTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'oi'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;... E não a variável em si.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;no&quot;&gt;NORTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'north'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;NORTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'east'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Então, cuidado!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Como dica, dê uma olhada na resposta &lt;strong&gt;TL;DR&lt;/strong&gt; a questão: http://stackoverflow.com/questions/26537564/ruby-constants-seem-to-be-invisibly-alterable&lt;/p&gt;

&lt;hr /&gt;

&lt;p style=&quot;text-align:center;&quot;&gt;&lt;strong&gt;Dicas - #funTip&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Por convenção:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Nomes de classes começam com letra maíscula e seguem o padrão &lt;em&gt;CamelCase&lt;/em&gt;, &lt;a href=&quot;https://github.com/ceciliassis/ruby-style-guide#camelcase-classes&quot;&gt;veja&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Nomes de métodos, variáveis, diretórios e arquivos devem seguir o padrão &lt;em&gt;snake_case&lt;/em&gt;, &lt;a href=&quot;https://github.com/ceciliassis/ruby-style-guide#snake-case-files&quot;&gt;veja&lt;/a&gt;.&amp;lt;/p&amp;gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para mais dicas sobre boas práticas de programação no Ruby, acesse &lt;a href=&quot;https://github.com/rubocop-hq/ruby-style-guide&quot;&gt;The Ruby Style Guide&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Bem, creio que com isso terminamos o post de hoje! Como podemos perceber o Ruby tem falhas, como qualquer outra linguagem,
  mas não deixe isso te abalar; Ruby continua sendo uma linguagem maravilhosa!&lt;/p&gt;

&lt;p&gt;Alguma dúvida ou sugestão? Deixe nos comentários!&lt;/p&gt;
&lt;p style=&quot;text-align:right;&quot;&gt;&lt;em&gt;&lt;strong&gt;Até mais!!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot; size-full wp-image-2004 aligncenter&quot; src=&quot;/assets/variaveis_e_seus_muitos_nomes.png&quot; alt=&quot;variaveis_e_seus_muitos_nomes&quot; width=&quot;735&quot; height=&quot;550&quot; /&gt;&lt;/p&gt;</content><author><name>Cecília Assis</name></author><category term="constante" /><category term="global" /><category term="local" /><category term="variaveis" /><category term="variável" /><summary type="html">Hey, como vai?! Olha, você sabia que em Ruby, os primeiros caracteres do nome de uma variável ditam qual a função dela? Do quê ela trata? Eu não sabia, e decidi trazer essa informação a você (e mais algumas coisinhas)!</summary></entry></feed>